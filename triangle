/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.

*/



public class Solution {
    public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int sum = 0;
        min_sum = Integer.MAX_VALUE;
        
        if (triangle.size()==0) return sum;
        
        min1(triangle);       // o(n^2) operations
        return triangle.get(0).get(0);

        /*
        min(triangle, 0, 0, 0);  // dfs
        return min_sum;
        */
        
        /*
        for (int i=0; i<triangle.size(); i++){
            sum += minmum(triangle.get(i));
        }
        return sum;
        */
    }
    
    private static void min1(ArrayList<ArrayList<Integer>> triangle){
        for (int i=triangle.size(); i>1; i--){
            ArrayList<Integer> arrayLower = triangle.get(i-1);
            ArrayList<Integer> arrayupper = triangle.get(i-2);
            for (int j=0; j<arrayupper.size(); j++){
                arrayupper.set(j, arrayupper.get(j)+Math.min(arrayLower.get(j), arrayLower.get(j+1)));
            }
        }
        
    }
    
    private static void min(ArrayList<ArrayList<Integer>> triangle, int sum, int d, int ind){
        
        if (d == triangle.size()) {
            min_sum = Math.min(min_sum, sum);
            return;
        }
        
        ArrayList<Integer> array = triangle.get(d);
        for (int i=ind; i<=Math.min(ind+1, array.size()-1); i++){
            min(triangle, sum+array.get(i), d+1, i);
        }
    }
    
    private static int min_sum = Integer.MAX_VALUE;
}
